timezone::region: '{{ timezone.region }}'
timezone::locality: '{{ timezone.locality }}'
cloudwatchlogs::region: '{{ aws.region }}'

config::base::install_amazon_ssm_agent: {{ aws.install_ssm_agent }}
config::base::install_cloudwatchlogs: {{ aws.install_cloudwatchlogs }}
config::base::http_proxy: {{ http_proxy }}
config::base::https_proxy: {{ https_proxy }}
config::base::no_proxy: {{ no_proxy }}

config::base::install_cloudwatch_metric_agent: {{ aws.install_cloudwatch_metric_agent }}

config::certs::certs_base: {{ aws.aem_certs_base }}
config::certs::certificate_key_arn: {{ aws.certificate_key_arn }}
config::certs::certificate_arn: {{ aws.certificate_arn }}
config::certs::region: {{ aws.region }}

config::license::aem_profile: {{ aem.profile }}
config::license::aem_license: {{ aws.aem_license | regex_replace('^/', '') }}
config::license::aem_license_base: {{ aws.aem_license_base }}
config::license::region: {{ aws.region }}

config::custom_image_provisioner::enable_custom_image_provisioner: {{ aem.enable_custom_image_provisioner }}

config::custom_image_provisioner::pre::timeout: {{ custom_image_provisioner.pre.timeout }}
config::custom_image_provisioner::post::timeout: {{ custom_image_provisioner.post.timeout }}

amazon_ssm_agent::proxy_url: {{ http_proxy }}


aem_curator::install_author::aem_profile: {{ aem.profile }}
aem_curator::install_author::aem_keystore_password: "%{lookup('{{ aem.keystore_password_parameter }}')}"

aem_curator::install_author::aem_artifacts_base: {{ aem.artifacts_base }}
aem_curator::install_author::aem_jvm_mem_opts: "{{ aem.author.jvm_mem_opts }}"
aem_curator::install_author::aem_jvm_opts:
{% if aem.author.jvm_opts is defined and (aem.author.jvm_opts | length>0) %}
{% for jvm_opt in aem.author.jvm_opts %}
- '{{ jvm_opt }}'
{% endfor %}
{% endif %}
- '-XX:+PrintGCDetails'
- '-XX:+PrintGCTimeStamps'
- '-XX:+PrintGCDateStamps'
- '-XX:+PrintTenuringDistribution'
- '-XX:+PrintGCApplicationStoppedTime'
- '-XX:+HeapDumpOnOutOfMemoryError'
{% if aem.author.run_modes is defined %}
aem_curator::install_author::run_modes:
{% for run_mode in aem.author.run_modes %}
- {{ run_mode }}
{% endfor %}
{% endif %}
aem_curator::install_author::data_volume_device: "{{ aws[os_type].devicemap_data_b }}"

aem_curator::install_publish::aem_profile: {{ aem.profile }}
aem_curator::install_publish::aem_keystore_password: "%{lookup('{{ aem.keystore_password_parameter }}')}"
aem_curator::install_publish::aem_artifacts_base: {{ aem.artifacts_base }}
aem_curator::install_publish::aem_jvm_mem_opts: "{{ aem.publish.jvm_mem_opts }}"
aem_curator::install_publish::aem_jvm_opts:
{% if aem.publish.jvm_opts is defined and (aem.publish.jvm_opts | length>0) %}
{% for jvm_opt in aem.publish.jvm_opts %}
- '{{ jvm_opt }}'
{% endfor %}
{% endif %}
- '-XX:+PrintGCDetails'
- '-XX:+PrintGCTimeStamps'
- '-XX:+PrintGCDateStamps'
- '-XX:+PrintTenuringDistribution'
- '-XX:+PrintGCApplicationStoppedTime'
- '-XX:+HeapDumpOnOutOfMemoryError'
{% if aem.publish.run_modes is defined %}
aem_curator::install_publish::run_modes:
{% for run_mode in aem.publish.run_modes %}
- {{ run_mode }}
{% endfor %}
{% endif %}
aem_curator::install_publish::data_volume_device: "{{ aws[os_type].devicemap_data_b }}"

aem_curator::install_dispatcher::apache_module_base_url: {{ aem.dispatcher.apache_module_base_url }}
aem_curator::install_dispatcher::apache_module_tarball: dispatcher-apache2.4-linux-x86_64-ssl{{ aem.dispatcher.ssl_version }}-{{ aem.dispatcher.version }}.tar.gz
aem_curator::install_dispatcher::apache_module_filename: dispatcher-apache2.4-{{ aem.dispatcher.version }}.so
aem_curator::install_dispatcher::data_volume_device: "{{ aws[os_type].devicemap_data_b }}"

aem_curator::install_java::jdk_base_url: "{{ aem.jdk.base_url }}"
aem_curator::install_java::jdk_filename: "{{ aem.jdk.filename }}"
aem_curator::install_java::jdk_version: "{{ aem.jdk.version }}"
aem_curator::install_java::jdk_version_update: "{{ aem.jdk.version_update }}"

aem_curator::install_author::aem_healthcheck_version: "{{ library.aem_healthcheck_version }}"
aem_curator::install_publish::aem_healthcheck_version:  "{{ library.aem_healthcheck_version }}"
